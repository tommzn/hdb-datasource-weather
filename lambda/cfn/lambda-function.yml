Parameters:
  FunctionName:
    Description: Lambda function name.
    Type: String
  RepositoryName:
    Description: Docker image location in AWS ECR which contains the function code.
    Type: String
  WeatherEventQueue:
    Description: Name of SQS queue weather events should be pushed to.
    Type: String
  EventArchiveQueue:
    Description: Name of a SQS queue used to archive events.
    Type: String
  S3ConfigPolicyArn: 
    Description: Policy ARN to enable config download from S3.
    Type: String
  
Resources:
  WeatherDataQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 3600
      ReceiveMessageWaitTimeSeconds: 5
      QueueName: !Ref WeatherEventQueue

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join 
        - ''
        - - '/aws/lambda/'
          - !Ref FunctionName
      RetentionInDays: 3

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref "S3ConfigPolicyArn"

  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - LogGroup
      - WeatherDataQueue
      - LambdaExecutionRole
    Properties: 
      PolicyName: "LambdaRecipeManagerPolicy"  
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:GetQueueUrl
              - sqs:SendMessageBatch
              - sqs:SendMessage
            Resource: 
              - !Join 
                - ''
                - - "arn:aws:sqs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref WeatherEventQueue
              - !Join 
                - ''
                - - "arn:aws:sqs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref EventArchiveQueue   
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt
              - LogGroup
              - Arn
      Roles: 
      - !Ref "LambdaExecutionRole"
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: 
      - LambdaExecutionRole
    Properties: 
      Code: 
        ImageUri: !Join 
          - ''
          - - !Ref "AWS::AccountId"
            - ".dkr.ecr."
            - !Ref "AWS::Region"
            - ".amazonaws.com/"
            - !Ref RepositoryName
            - ":latest"
      Description: !Ref FunctionName
      FunctionName: !Ref FunctionName
      MemorySize: 128
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      PackageType: Image
      Timeout: 10

  LambdaScheduledRule: 
    Type: AWS::Events::Rule
    DependsOn: 
      - LambdaFunction
    Properties: 
      Description: !Join 
          - ' '
          - - "Schedule Lambda Function"
            - !Ref FunctionName
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  
  LambdaScheduledRulePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "FunctionName"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "LambdaScheduledRule"
          - "Arn"